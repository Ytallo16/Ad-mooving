#!/bin/bash

# Script de Deploy para Produ√ß√£o
# Uso: ./deploy.sh [environment]
# Exemplo: ./deploy.sh production

set -e

ENVIRONMENT=${1:-production}
PROJECT_NAME="admooving"

echo "üöÄ Iniciando deploy para ambiente: $ENVIRONMENT"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    error "Docker n√£o est√° rodando. Por favor, inicie o Docker e tente novamente."
fi

# Verificar se o arquivo .env existe
if [ ! -f ".env" ]; then
    error "Arquivo .env n√£o encontrado. Por favor, crie o arquivo de configura√ß√£o."
fi

# Fun√ß√£o para parar containers existentes
stop_containers() {
    log "Parando containers existentes..."
    docker compose down --remove-orphans || true
}

# Fun√ß√£o para fazer pull das imagens mais recentes
pull_images() {
    log "Fazendo pull das imagens mais recentes..."
    docker compose pull
}

# Fun√ß√£o para iniciar os containers
start_containers() {
    log "Iniciando containers..."
    docker compose up -d
    
    # Aguardar os containers ficarem saud√°veis
    log "Aguardando containers ficarem saud√°veis..."
    sleep 30
    
    # Verificar status dos containers
    if docker ps | grep -q "admooving"; then
        log "‚úÖ Containers iniciados com sucesso!"
    else
        error "‚ùå Falha ao iniciar containers"
    fi
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
health_check() {
    log "Verificando sa√∫de dos servi√ßos..."
    
    # Verificar backend
    if curl -f http://localhost:8000/api/health/ > /dev/null 2>&1; then
        log "‚úÖ Backend est√° saud√°vel"
    else
        warn "‚ö†Ô∏è  Backend pode n√£o estar respondendo corretamente"
    fi
    
    # Verificar frontend
    if curl -f http://localhost:3000/ > /dev/null 2>&1; then
        log "‚úÖ Frontend est√° saud√°vel"
    else
        warn "‚ö†Ô∏è  Frontend pode n√£o estar respondendo corretamente"
    fi
}

# Fun√ß√£o para mostrar logs
show_logs() {
    log "Mostrando logs dos containers..."
    docker compose logs --tail=50
}

# Fun√ß√£o para rollback
rollback() {
    log "Executando rollback..."
    # Aqui voc√™ pode implementar l√≥gica de rollback
    # Por exemplo, voltar para uma vers√£o anterior das imagens
    warn "Rollback n√£o implementado ainda"
}

# Menu principal
case $ENVIRONMENT in
    "production")
        log "Iniciando deploy para PRODU√á√ÉO"
        stop_containers
        pull_images
        start_containers
        health_check
        log "üéâ Deploy para produ√ß√£o conclu√≠do!"
        ;;
    "staging")
        log "Iniciando deploy para STAGING"
        # Implementar l√≥gica para staging se necess√°rio
        warn "Deploy para staging n√£o implementado ainda"
        ;;
    "rollback")
        rollback
        ;;
    "logs")
        show_logs
        ;;
    "status")
        docker compose ps
        ;;
    *)
        echo "Uso: $0 [production|staging|rollback|logs|status]"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  production  - Deploy para produ√ß√£o"
        echo "  staging     - Deploy para staging"
        echo "  rollback    - Fazer rollback"
        echo "  logs        - Mostrar logs"
        echo "  status      - Mostrar status dos containers"
        exit 1
        ;;
esac

log "Deploy script finalizado!"
