#!/usr/bin/env python3
"""
Script de teste para verificar a integra√ß√£o Stripe
"""

import os
import sys
import django
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

# Importar modelos e services
from api.models import RaceRegistration
from api.services import create_stripe_checkout_session, get_race_prices
from api.views import *

def test_stripe_integration():
    """Testa a integra√ß√£o com Stripe"""
    print("üöÄ Testando Integra√ß√£o Stripe - Corrida Ad-mooving")
    print("=" * 50)
    
    # 1. Testar pre√ßos
    print("\n1Ô∏è‚É£ Testando pre√ßos das modalidades:")
    prices = get_race_prices()
    for modality, info in prices.items():
        print(f"   {modality}: R$ {info['amount_brl']:.2f}")
    
    # 2. Criar inscri√ß√£o de teste
    print("\n2Ô∏è‚É£ Criando inscri√ß√£o de teste...")
    try:
        # Limpar inscri√ß√µes de teste anteriores
        RaceRegistration.objects.filter(email="teste@admooving.com").delete()
        
        registration = RaceRegistration.objects.create(
            full_name="Jo√£o Teste Silva",
            cpf="12345678901",
            email="teste@admooving.com",
            phone="11999999999",
            birth_date="1990-01-01",
            gender="M",
            modality="ADULTO",
            shirt_size="M",
            athlete_declaration=True
        )
        print(f"   ‚úÖ Inscri√ß√£o criada: ID {registration.id}")
        
        # 3. Testar cria√ß√£o de sess√£o de checkout
        print("\n3Ô∏è‚É£ Testando cria√ß√£o de sess√£o de checkout Stripe...")
        result = create_stripe_checkout_session(registration)
        
        if result['success']:
            print(f"   ‚úÖ Sess√£o criada com sucesso!")
            print(f"   üìÑ Session ID: {result['session_id']}")
            print(f"   üîó URL de Checkout: {result['checkout_url']}")
            print(f"   üí∞ Valor: R$ {result['amount']:.2f}")
        else:
            print(f"   ‚ùå Erro ao criar sess√£o: {result['error']}")
            
        # 4. Verificar se os campos foram salvos
        registration.refresh_from_db()
        print(f"\n4Ô∏è‚É£ Verificando campos salvos:")
        print(f"   Stripe Session ID: {registration.stripe_checkout_session_id}")
        print(f"   Valor do Pagamento: R$ {registration.payment_amount}")
        print(f"   Status: {registration.payment_status}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_stripe_config():
    """Testa configura√ß√µes do Stripe"""
    print("\nüîß Verificando Configura√ß√µes Stripe:")
    print("=" * 30)
    
    from django.conf import settings
    import stripe
    
    # Verificar chaves
    public_key = getattr(settings, 'STRIPE_PUBLIC_KEY', '')
    secret_key = getattr(settings, 'STRIPE_SECRET_KEY', '')
    webhook_secret = getattr(settings, 'STRIPE_WEBHOOK_SECRET', '')
    
    print(f"Public Key: {'‚úÖ Configurada' if public_key else '‚ùå N√£o configurada'}")
    print(f"Secret Key: {'‚úÖ Configurada' if secret_key else '‚ùå N√£o configurada'}")
    print(f"Webhook Secret: {'‚úÖ Configurada' if webhook_secret else '‚ö†Ô∏è  N√£o configurada (OK para desenvolvimento)'}")
    
    # Testar conex√£o com Stripe
    if secret_key:
        try:
            stripe.api_key = secret_key
            # Fazer uma chamada simples para testar
            account = stripe.Account.retrieve()
            print(f"‚úÖ Conex√£o com Stripe OK - Conta: {account.id}")
            return True
        except Exception as e:
            print(f"‚ùå Erro na conex√£o com Stripe: {str(e)}")
            return False
    else:
        print("‚ùå Chave secreta n√£o configurada")
        return False

if __name__ == "__main__":
    print("üß™ SISTEMA DE TESTES - STRIPE INTEGRATION")
    print("=" * 60)
    
    # Testar configura√ß√µes
    config_ok = test_stripe_config()
    
    if config_ok:
        # Testar integra√ß√£o
        integration_ok = test_stripe_integration()
        
        if integration_ok:
            print("\nüéâ SUCESSO! Integra√ß√£o Stripe funcionando perfeitamente!")
            print("\nüìã Pr√≥ximos passos:")
            print("   1. Integrar no frontend React")
            print("   2. Configurar webhook em produ√ß√£o")
            print("   3. Testar com cart√µes de teste do Stripe")
        else:
            print("\n‚ùå Falha na integra√ß√£o. Verifique os logs acima.")
    else:
        print("\n‚ùå Configura√ß√µes incorretas. Verifique o arquivo .env")
    
    print("\n" + "=" * 60)
